name: release
on:
  push:
    tags:
      - '*'
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      PACKAGE_PREFIX: ${{ steps.get-package_prefix.outputs.PACKAGE_PREFIX }}
      TAG_NAME: ${{ steps.get-package_prefix.outputs.TAG_NAME }}
      HEAD_SHA_SHORT: ${{ steps.get-package_prefix.outputs.HEAD_SHA_SHORT }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: get-package_prefix
        id: get-package_prefix
        run: |
          LIB_NAME=waifu2x-ncnn-vulkan-python
          TAG_NAME=$(git describe --abbrev=0 --tags)
          HEAD_SHA_SHORT=$(git rev-parse --short HEAD)
          echo "::set-output name=PACKAGE_PREFIX::${LIB_NAME}-${TAG_NAME}"
          echo "::set-output name=TAG_NAME::${TAG_NAME}"
          echo "::set-output name=HEAD_SHA_SHORT::${HEAD_SHA_SHORT}"

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-ubuntu-x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: build-python
        run: |
          wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz
          tar -Jxvf Python-3.7.9.tar.xz
          cd Python-3.7.9
          ./configure --prefix=/usr/local/python3.7 --enable-shared --enable-optimizations
          make && make install
          cd ..
      - name: build
        run: |
          export PYTHON_BIN="/usr/local/python3.7/bin/python3"
          bash build.sh
          mkdir -p ${{ env.PACKAGENAME }}
          cp $BUILD_PATH/waifu2x_vulkan.so ${{ env.PACKAGENAME }}
      - name: package
        run: |
          mkdir -p ${{ env.PACKAGENAME }}
          cp README.md LICENSE ${{ env.PACKAGENAME }}
          cp -r models test ${{ env.PACKAGENAME }}
          zip -9 -r $PACKAGENAME.zip $PACKAGENAME
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  macos:
    needs: [setup]
    runs-on: macos-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-macos-x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'
      
      - name: build-python
        run: |
          mkdir -p ../python3.7
          wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tar.xz
          tar -Jxvf Python-3.7.9.tar.xz
          cd Python-3.7.9
          ./configure --prefix=../python3.7 --enable-shared --enable-optimizations
          make && make install
          cd ..
      - name: build
        run: |
          export PYTHON_BIN="./python3.7/bin/python3"
          bash build_mac.sh
          mkdir -p ${{ env.PACKAGENAME }}
          cp $BUILD_PATH/waifu2x_vulkan.so ${{ env.PACKAGENAME }}
      - name: rename-and-package
        run: |
          mkdir -p ${{ env.PACKAGENAME }}
          cp README.md LICENSE ${{ env.PACKAGENAME }}
          cp -r models test ${{ env.PACKAGENAME }}
          zip -9 -r $PACKAGENAME.zip $PACKAGENAME
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  windows:
    needs: [setup]
    runs-on: windows-latest
    env:
      PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-windows-x64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      
      - name: install-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'
      - name: build
        run: |
          .\build.ps1
          mkdir -Force ${{ env.PACKAGENAME }}
          cp $Env:BUILD_PATH\Release\waifu2x_vulkan.pyd ${{ env.PACKAGENAME }}
      - name: package
        run: |
          mkdir -Force ${{ env.PACKAGENAME }}
          Copy-Item -Verbose -Path "README.md" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Path "LICENSE" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Recurse -Path "models" -Destination "${{ env.PACKAGENAME }}"
          Copy-Item -Verbose -Recurse -Path "test" -Destination "${{ env.PACKAGENAME }}"
          7z a -r "$($Env:PACKAGENAME + '.zip')" "$($Env:PACKAGENAME)"
      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGENAME }}
          path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
      - name: download
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: create-release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.setup.outputs.TAG_NAME }}
          release_name: ${{ needs.setup.outputs.TAG_NAME }}
          draft: true
          prerelease: true

      - name: upload-ubuntu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-ubuntu-x86_64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip

      - name: upload-macos-py39
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-macos-x86_64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip

      - name: upload-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGENAME: ${{ needs.setup.outputs.PACKAGE_PREFIX }}-windows-x64
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
          asset_name: ${{ env.PACKAGENAME }}.zip
          asset_content_type: application/zip
